---
const { question, answer } = Astro.props;
---
<details class="faq-item hidden" aria-expanded="false">
    <summary class="faq-item-content">
        <span class="faq-item-label">
            {question}
        </span>
        <span class="faq-item-toggle">
            <span class="toggle-vertical"></span>
            <span class="toggle-horizontal"></span>
        </span>
    </summary>
    <div class="faq-item-text">{answer}</div>
</details>

<style>
    /* mobiles */
    @media (max-width: 425px) {
        details.faq-item {
            --grid-width-number: 2rem !important;
            padding-left: 0 !important;
            padding-right: 0 !important;
            width: 100% !important;
        }

        .faq-item-label::before {
            left: 0 !important;
        }

        details.faq-item .faq-item-text {
            --target-width: 18.5rem !important;
        }

        .faq-item-toggle {
            --size: 16px !important;
        }
    }

    /* tablets */
    @media (min-width: 426px) and (max-width: 768px) {
        details.faq-item {
            --grid-width-number: 4rem !important;
            --padding-v: 1.9375rem !important;
        }

        details.faq-item .faq-item-text {
            --target-width: 25rem !important;
        }
    }

    details.faq-item summary::-webkit-details-marker {
        display: none !important; /* hides the default 'arrow' for expanding */
    }

    details.faq-item {
        --padding-h: 1.375rem;
        --padding-v: 1.5rem;
        --grid-width-number: 6.25rem;

        counter-increment: faq-item;
        position: relative;
        width: calc(100%);

        pointer-events: none;

        padding: 0;

        transition: padding 0.3s ease;
    }

    details[aria-expanded="true"].faq-item {
        padding-bottom: var(--padding-v);
    }

    details.faq-item::after {
        z-index: 1;
        content: "";
        background: linear-gradient(to right, gray 24%, #90F4E8 25%, #2DD282 75%, gray 76%);
        background-size: 300% 100%;
        background-position: 125% center;
        width: calc(100% + var(--padding-h) * 0);
        height: 1px !important;
        position: absolute;
        left: 0;
        bottom: 0;
        background-repeat: repeat;
        transition: background 0.75s ease;
    }

    details[aria-expanded="true"].faq-item::after,
    details.faq-item:hover::after {
        background-position: 50% 50%;
    }

    details.faq-item.hidden {
        display: none !important;
    }

    .faq-item-content {
        cursor: pointer !important;
        pointer-events: auto;

        display: grid;
        grid-template-areas: 'faq-item-number faq-item-label faq-item-toggle';

        grid-template-columns: var(--grid-width-number) 1fr 2.25em;
        grid-template-rows: auto;

        justify-self: stretch;

        width: 100%;
        line-height: 1.5;

        padding-top: var(--padding-v);
        padding-bottom: var(--padding-v);

        transition: 0.3s margin-bottom linear;
    }

    details[aria-expanded="true"].faq-item .faq-item-content {
        margin-bottom: 0;
    }

    .faq-item-label {
        grid-area: faq-item-label;

        word-break: break-word;
        white-space: normal;
        text-align: left;
    }

    .faq-item-label::before {
        grid-area: faq-item-number;
        text-wrap: nowrap;
        color: var(--secondary-color);

        position: absolute;
        left: var(--padding-h);
    }

    .faq-item-label::before {
        content: counter(faq-item, decimal-leading-zero);
    }

    .faq-item-text {
        padding-bottom: 0;
        padding-top: 0;
        font-size: 0.875rem;
        --target-width: 35.875rem;
        max-width: var(--target-width);
        width: fit-content;
        line-height: 1.75;
        font-weight: 400;
        letter-spacing: 0.015em;
        margin-left: var(--grid-width-number);

        cursor: text;
        overflow: hidden;
        height: min-content;
        transition: height 0.3s ease, padding-bottom 0.3s ease, padding-top 0.3s linear;
    }

    .faq-item-toggle {
        grid-area: faq-item-toggle;

        --size: 1.5rem;
        height: var(--size);
        width: var(--size);
        min-height: var(--size);
        min-width: var(--size);

        display: flex;
        justify-content: center;
        align-items: center;
        align-self: start;

        border-radius: 50%;
        border: solid 1px transparent;
        background: linear-gradient(var(--background-color), var(--background-color)) padding-box, var(--primary-gradient) border-box;
    }

    .faq-item-toggle .toggle-vertical,
    .faq-item-toggle .toggle-horizontal {
        border-radius: 4px;
        background: var(--primary-gradient);
        width: 1px;
        height: calc(var(--size) * 0.34);
        transition: transform 0.4s ease;
    }

    .faq-item-toggle .toggle-horizontal{
        position: absolute;
        transform: rotate(90deg);
    }

    details[aria-expanded="true"].faq-item .faq-item-toggle .toggle-horizontal {
        transform: rotate(270deg);
    }
    details[aria-expanded="true"].faq-item .faq-item-toggle .toggle-vertical {
        transform: rotate(90deg);
    }
</style>

<script>
    const enableOpenCloseAnimations:boolean = true;

    document.querySelectorAll('.faq-item').forEach((faqItem) => {
        const faqItemText = faqItem.querySelector('.faq-item-text');
        const summary = faqItem.querySelector('summary');
        if (!faqItemText || !summary) return; // Sprawdzenie, czy elementy istnieją

        faqItem.addEventListener('click', (event) => {
            // Sprawdzenie, czy kliknięto poza div.faq-item-text
            if (!event.target.closest('.faq-item-text')) {
                event.preventDefault(); // Blokowanie domyślnego działania <details>

                const isOpen = faqItem.open;

                // Zamknięcie innych elementów z animacją
                document.querySelectorAll('.faq-item').forEach((item) => {
                    if (item !== faqItem && item.open) {
                        closeWithAnimation(item);
                    }
                });

                if (isOpen) {
                    // Zamknięcie klikniętego elementu
                    closeWithAnimation(faqItem);
                } else {
                    // Otwarcie klikniętego elementu
                    openWithAnimation(faqItem);
                }
            }
        });
    });

    // Otwórz ponownie otwarty element details po zmianie rozmiaru okna
    window.addEventListener('resize', () => {
        let targetElem = document.querySelector('details[aria-expanded="true"]');
        // Usuń atrybut open i aria-expanded='true'
        if (targetElem) {
            targetElem.removeAttribute('open');
            targetElem.setAttribute('aria-expanded', 'false');
        }

        // Uruchom animację otwierania (w celu ustawienia odpowiedniej wysokości)
        if (!targetElem.open) {
            openWithAnimation(targetElem);
        }
    });


    // Funkcja do otwierania z animacją
    function openWithAnimation(details) {
        if (!enableOpenCloseAnimations) {
            details.open = true;
            return;
        }

        const faqItemText = details.querySelector('.faq-item-text');
        if (!faqItemText) return;

        details.open = true; // Otwórz element <details>
        faqItemText.style.height = '0px'; // Ustaw początkową wysokość
        const targetHeight = faqItemText.scrollHeight + 'px'; // Docelowa wysokość
        // ustaw height na targetHeight a scale (pion) na 1
        details.setAttribute('aria-expanded', 'true'); // Aktualizuj atrybut aria
        requestAnimationFrame(() => (faqItemText.style.height = targetHeight));
        faqItemText.addEventListener(
            'transitionend',
            { once: true }
        );
    }

    // Funkcja do zamykania z animacją
    function closeWithAnimation(details) {
        if (!enableOpenCloseAnimations) {
            details.open = false;
            return;
        }

        const faqItemText = details.querySelector('.faq-item-text');
        if (!faqItemText) return;

        faqItemText.style.height = `${faqItemText.scrollHeight}px`; // Ustaw wysokość na aktualną
        details.setAttribute('aria-expanded', 'false'); // Aktualizuj atrybut aria
        requestAnimationFrame(() => (faqItemText.style.height = '0px'));
        faqItemText.addEventListener(
            'transitionend',
            () => { details.open = false; },// Zamknij element <details> po animacji
            { once: true }
        );
    }
</script>